****************
* Circuit
* CS 221
* 12/5/24
* Morgan Zabriskie
**************** 

OVERVIEW:

 The CircuitTracer programs takes in a circuit board schematic
 from the user and does a brute-search force to find the 
 quickest path from the starting point (1) to the ending point (2).
 It prints out the fastest paths to the user.


INCLUDED FILES:

 * CircuitTracer.java - the driver file
 * CircuitBoard.java - the Circuit Board class file
 * TraceState.java - the TraceState class file
 * Storage.java - the Storage class file
 * InvalidFileFormatException.java - file formatting error class file
 * OccupiedPositionException.java - class file for Occupied Position error
 * README - this file


COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
 $ javac *.java

 Run the compiled class file with the command:
 $ java CircuitTracer [-s | -q] [-c | -g] filename
    First argument:
        -s -- use a stack for storage
        -q -- use a queue for storage

    Second argument:
        -c --run program in console mode
        -g --run program in GUI mode

 Console output will give the results after the program finishes.

 ANALYSIS

 i. If a stack is used as the storage structure, one path will be
 explored until it reaches the end, a point where it is adjacent to the spot
 that has a 2 (depth-first). This is because the first element of the stack will
 be popped off the stack, then the program will generate 1 or more
 new paths to explore. Those new paths get added to the top of thes stack,
 then they are popped off and new paths generated from those points. The
 first path, which is sitting at the bottom of the stack, won't be popped
 off until all the paths generated from the second (or third or fourth, 
 depending on starting board structure) have been finished.
 When using a queue, every path will be explored at the same rate (breadth-first). The 
 program will look at the first path, then generate new paths from that point
 and add it to the back of the queue. Then, the second path will be explored
 and so on for all possible path options. Then, the program will get to the
 new set of paths from the first path, look at each, then generate new paths.
 Then the second, and so on. So each possible path will move along together,
 rather than finishing one and then looking at the next.

 ii. The total number of search states is not affected by the choice of
 storage structure. The same paths will be search using a stack or queue,
 the difference is how each path is traced through time. If there are six
 possible paths, both structures will search six paths. The stack will trace one
 path to completion, then the next to completion, and so on (depth-first). The queue will
 trace all paths sequentially, starting with the first path and adding a step,
 then the second path and adding a step, until all paths have been looked at. Then it
 will start with the first path and its children and add on steps to all children, then
 look at the second step and its children and add on steps to all children, etc until
 each path has reached an end point (breadth-first).

 iii. Since the search algorithm is going to find every possible path regardless of
 underlying storage structure, the solution will not be found in fewer steps using a 
 stack or a queue.

 iv. Using a queue, or breadth-first method, guarantees the first solution found is the
 shortest path. This is because you are stepping through all paths at the same time. So if
 one solution is found after taking two steps, you know that's the shortest path compared
 to the other possible paths that haven't found a solution yet.
 With a stack, there's no guarantee you've found the shortest path when you've found the first
 solution. The first solution is essentially random, and could be the shortest path or could
 equally likely be the longest path.

 v. Memory use is very different depending on storage choice. In the stack, you will
 have fewer items in Storage most of the time. This is because the stack is depth-first,
 and you will only generate 1-3 new paths each run through the while loop. In the queue,
 which is breadth-first, your number of possible paths that are sitting in Storage
 waiting to be reviewed grows larger with each step you take. Towards the end of the
 analysis, you will have many branches of the possible paths that you could take.

 vi. The Big O runtime for these search algorithms is linear because we visit each position once,
 and once each of those combinations of position + next position is explored, we don't revisit
 that position. N, the primary input factor increasing the difficulty of the task, is
 the number of open positions on the board. Even if 1 and 2 are very close to each other, the
 search algorithm is going to search every possible path. If there are a lot of open positions
 on the board, then the number of possible paths begins to increase, increasing the difficulty 
 of the search.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 This program takes in a file from the user as well as inputs on the
 underlying storage structure to be used. The user could also specify
 console vs GUI output, but GUI output is not supported in my program.

 The CircuitTracer class is the main driver of the program. Once the
 user has entered a file and choice of storage type, a new CircuitBoard
 is created in the CircuitBoard class file. The CircuitBoard constructor
 reads the file and fills in a char[][] with the characters from the
 file. It makes sure the input has the correct number of rows and columns
 and also checks that all characters in the file are 'legal'. 

 After the initial board is created, the driver class creates an underlying
 storage structure based on user input (either a stack or a queue). This
 storage is of class Storage, which is another included class file.

 The driver then calls the brute force search algorithm to find the shortest
 paths. It does this by creating an ArrayList called bestPath, which will
 contain the fastest routes the algorithm finds. It also creates stateStore,
 which is of the storage type specified by the user. All paths that need
 to be analyzed are kept in stateStore.

 The search algorithm takes the first TraceState from stateStore and checks
 if it is a solution (adjacent to the ending point 2 on the board). If it is,
 it checks to see if its path is shorter than or equal to the current paths in
 bestPaths. If it is shorter, it clears bestPaths and stores the current TraceState.
 If it is equal, it adds the current TraceState to bestPaths. If it's longer
 than the bestPaths, then it isn't added.

 If the current TraceState isn't a solution, then we call the findOpenPaths function
 and generate new TraceStates for any open positions around our current TraceState
 point. These new TraceStates get added to stateStore. This search continues this
 process until stateStore is empty and all paths have been explored.

 Once the search is complete, the TraceStates in bestPaths are printed to the console
 for the user to see the shortest paths to get from 1 to 2.

TESTING:

My initial testing was through print statements. I started by checking that the constructor
was reading the given input file correctly by printing the char[][] to the console for 
me to double check. This also gave me the chance to test that my exceptions were
being thrown correctly.

I also used print statements to see how my search algorithm was working. I would have the
current path being analyzed printed to the console, as well as how long the current
path was and if it was a solution. At the end of each run through the algorithm, I printed
what was in bestPaths. I tested all given boards (valid and invalid) to check the output
was what I expected it to be.

After that was working, I used the provided tester to see how my program was working and
tweaked as needed to get 100% of tests passing.

The program is fairly idiot-proof: if someone puts in the wrong args to the command line
statement or a file that doesn't exist, a usage error will be printed to the console.
If the contents of the file aren't right (too short, too long, not the right characters),
then an error will print out.

DISCUSSION:
 
 The first difficulty I encountered was figuring out how all the provided class files 
 worked together, so I knew what kind of methods I had to work with and how they
 should call each other. Handling the file parsing wasn't too hard because I had our
 warmup assignment as reference. 

 When writing the search algorithm, I ran into a few issues. The first was that when
 I was keeping track of the path length, it was always giving me a path length of 1. 
 The program was also storing every path in bestPaths rather than filtering them out
 for shortest length (because all path lengths were 1). I had a hard time understanding
 what was going wrong until I realized I was using the wrong constructor when making
 the next point in the path. I was calling the initial TraceStates constructor rather
 than calling the constructor for making the next point on the path. Once I fixed that,
 the search worked really well.

 The other issue I encountered was when I ran the provided tester for the first time. 
 The .dat files from the tester have a lot of whitespace in them, and my code originally
 only accounted for one blank space between characters. I did a little research and found
 that you can add a + to the delimiter statement to get multiple white spaces to be used as
 the delimiter (for example, a space, space, tab and a space would be treated the same). That
 was an easier solution than I was expecting.

 The final issue was also when I ran the provided tester. The exceptions I was throwing 
 weren't what the tester wanted, and I had to tweak my code to catch the right exception. I
 was letting the program throw and NoSuchElementException instead of explicitly checking that
 there weren't too few rows or columns in the given file. I add an if statement at the
 beginning of both for loops when reading the file to check for that and that solved the issue.
 
 I enjoyed this assignment, and as always when the tester finally shows 100% it's the best feeling.
 Doing this assignment highlighted to me how much I've learned this semester. At the beginning
 of the semester, a project that included this many class files and that had so many moving
 parts would have been really intimidating. I also noticed that I have a better sense for
 differentiating different Objects and knowing type of object can call which method. For example,
 there are times in this code where you need a method in the CircuitBoard class but you're
 working with a TraceState object, so you have to say traceState.getBoard.(board method) for 
 the program to work. Those kinds of errors used to really confuse me, but now I understand
 them better and don't run into them as often.
